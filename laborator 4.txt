PROBLEMA 1
﻿/*
Batinas Claudia gr 2112 - Implementaţi metoda bulelor (Bubble-Sort) care foloseşte un indicator flag şi optimizează ciclul interior. Se
cere atât scrierea funcţiei, cât şi partea de program care face citirea şi afişarea şirului iniţial şi a celui ordonat.
*/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

#define MAX 30

void bubbleSort(int tab[], int n);//prototip de functie pt ordonare folosind Bubble Sort


int main()
{
    int tab[MAX], i, n, step, temp;
  
    printf("Enter the number of elements to be sorted: ");
    scanf("%d", &n); //am citit nr de elemente al tabloului
    if (n > 30 || n < 0)
    {
        printf("\nDimensiune gresita!"); //validare
        return 1;

    }
    for (i = 0; i < n; i++)
    {
        printf("\ntab[%d]: ", i + 1);
        scanf("%d", &tab[i]); //am citit elementele sirului
    }
    printf("\n\tSirul initial este: ");
    for (i = 0; i < n; i++)
    {
        printf("%d ", i + 1, tab[i]); //am afisat sirul initial
        
    }
    bubbleSort(tab, n); 

    return 0;
}


void bubbleSort(int tab[], int n) //functie pt ordonare folosind Bubble Sort
{
    int i, j, aux, flag = 0;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n - i - 1; j++)
        {
            
            if (tab[j] > tab[j + 1]) //algoritm bubble sort
            {
                
                aux = tab[j];
                tab[j] = tab[j + 1];
                tab[j + 1] = aux;

                flag = 1; //daca am interschimbat macar o data elementele din sir flag-ul a primit valoarea 1
            }
        }
        
        if (flag == 0) //daca valoarea flag-ului a ramas 0 iesit din structura repetitiva
        {
            break;
        }
    }
   
    printf("\nSirul sortat este: ");
    for (i = 0; i < n; i++)
    {
        printf("%d  ", tab[i]); //am afisat sirul sortat
    }
}



PROBLEMA 10




﻿/*Batinas Claudia gr 2112 - Generati printr - un mecanism aleatoriu un tablou de maxim 200 de valori reale(prin doua tablouri de aceiaşi
        dimensiune, primul fiind partea intreaga(nu mai mare de 100), al doilea partea fractionara(limitata la 20 ca
                intreg ce devine .20 fractionar), tabloul real fiind obtinut prin combinarea partii intregi şi fractionare.Afişati
        tablourile generate, cel real obtinut.
    Sortati folosind functia qsort( ) tabloul real si afisati rezultatul obtinut.
        */

#include <iostream>
#include <cstdlib>
#define MAX 200

int compare(const void* a, const void* b); //prototip de functie de comparare


using namespace std;

int main()
{
    int tab1[MAX];
    float tab2[MAX], tab[MAX];
    int n;
    cout << "\nIntroduceti dimensiunea tabloului: ";
    cin >> n; //am scris dimensiunea tabloului
    if (n<0 || n>MAX)
    {
        cout << "\nDimensiune gresita!"; //validare
        return 1;
    }
    srand(time(NULL));
    for (int i = 0; i < n; i++)
        tab1[i] = rand() % 100; //am generat valori aleatorii care reprezinta partea reala 
    cout << "\nTabloul cu valori aleatorii este: ";
    for (int i = 0; i < n; i++)
        cout << tab1[i] << " "; //am afisat elementele tabloului generat aleatoriu

    for (int i = 0; i < n; i++)
        tab2[i] = rand() % 20; ////am generat valori aleatorii care reprezinta partea fractionara 
    cout << "\nTabloul cu valori aleatorii este: ";
    for (int i = 0; i < n; i++)
        cout << tab2[i] << " "; //am afisat elementele tabloului generat aleatoriu

    cout << "\nTabloul format prin combinarea partii reale si imaginare: ";
    for (int i = 0; i < n; i++)
    {
        tab[i] = tab1[i] + (tab2[i] / 100); //am combinat partea imaginara cu partea fractionara
       
        cout << tab[i] << " ";
    }
    qsort(tab, n, sizeof(float), compare); //am sortat elementele crescator din tablou
    cout << endl << endl;
    cout << "Sirul dupa sortare: " << endl;

    for (int i = 0; i < n; i++)
        cout << tab[i] << " "; //am afisat noul tablou sortat
}


int compare(const void* a, const void* b) //functie de comparare
{
    const int* x = (int*)a;
    const int* y = (int*)b;

    if (*x > *y)
        return 1;
    else if (*x < *y)
        return -1;

    return 0;
}


PROBLEMA 11



/*Batinas Claudia gr 2112 - Alocati in mod dinamic un tablou de n numere intregi, care vor fi citite si afisate.Cititi o valoare cheie de la
intrarea standard.Folosind functia _lfind() cautati si afisati toate pozitiile in care aceasta cheie se gaseste in
tabloul citit.Tratati cazul in care sunt valori multiple, sau valoarea nu e in tablou.Folosind functia qsort()
sortati apoi acest tablou, pe care il afisati.Cautati folosind functia bsearch() aceiasi valoare in tabloul sortat si
afisati pozitia ei.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <malloc.h>
#include <stdlib.h>
#include <search.h>

#define MAX 20

int compare_int(int* a, int* b);
int compare(const void* a, const void* b);

int main()
{
    int n,i,key=0;
    int* tab = NULL;
    printf("\nIntroduceti dimensiunea tablolului: ");
    scanf("%d", &n);
    if ((tab = (int*)malloc(n * sizeof(int)))) //am verificat daca alocarea dinamica a n date de tip int s-a realizat cu succes
    {
        printf("\nIntroduceti elementele tablolului: \n");
        for (i = 0; i < n; i++)
        {
            printf("\t elementul %d: ", i);
            scanf("%d", tab + i); //am citit elementele tabloului
        }

    }
    else
        printf("\nAlocare nereusita !");

    for (i = 0; i < n; i++)
    {
        printf("\n tab[%d]: %d", i,tab[i]); //am afisat elementele tabloului
        
    }
   
    int* int_ptr,*int_ptr1, key_value,num; //key_value is the searching value
    printf("\nIntroduceti cheia: ");
    scanf("%d", &key);
    //call lfind()
    int_ptr = (int*)_lfind(&key, tab, (unsigned*)&n, sizeof(int),
        (int (*) (const void*, const void*)) compare_int);
   
        if (int_ptr != 0)
            printf("Numarul %d este in tablou la pozitia : %lld si adresa %p\n", key, int_ptr - tab,
                int_ptr);
        else
            printf("Numarul %d nu este in tablou\n", key);

    qsort(tab, n, sizeof(float), compare); //am sortat elementele crescator din tablou
    printf("\n");
    printf("\nSirul dupa sortare: ");

    for (int i = 0; i < n; i++)
        printf("\n %d ", tab[i] ); //am afisat noul tablou sortat

    num = sizeof(tab) / sizeof(int);
    int_ptr1 = (int*)bsearch(&key, tab, num, sizeof(int),
        (int (*) (const void*, const void*)) compare_int);
    if (int_ptr1)
        printf("\nValoarea %d a fost gasita pe pozitia %d\n", key, int_ptr - tab);
    else
        printf("\nValoarea %d nu a fost gasita!");
    return 0;
}


int compare_int(int* a, int* b)
{
    return(*a - *b);
}//end compare_int( )


int compare(const void* a, const void* b) //functie de comparare
{
    const int* x = (int*)a;
    const int* y = (int*)b;

    if (*x > *y)
        return 1;
    else if (*x < *y)
        return -1;

    return 0;
}


PROBLEMA 2



﻿/*
Batinas Claudia gr 2112 - Modificaţi programul care exemplifică metoda de sortare rapidă explicita (Quick-Sort) aşa încât să ordoneze
şirul iniţial în ordine descrescătoare
*/

#include <iostream>
using namespace std;

#define MAX 30

void quickSort(int* p, int prim, int ultim); //prototip de functie in care folosim quickSort

int main()
{

        int tab[MAX];
        int n,i;
        cout << "\nIntroduceti dimensiunea sirului: ";
        cin >> n; //am citit dimensiunea sirului
        if (n < 0 || n>30)
        {
                cout << "Dimensiune gresita!"; //validare
                return 1;
        }

        cout << "\nIntroduceti elementele sirului: ";
        for (i = 0; i < n; i++)
                cin >> tab[i]; //am citit elementele sirului

        quickSort(tab, 0, n - 1); 

        for (int i = 0; i < n; i++) {
                cout << tab[i] << " "; //am afisat sirul
        }

        return 0;
}

void quickSort(int* p, int prim, int ultim) { //functie in care folosim quickSort
        int i, j, pivot, temp;
        i = prim;
        j = ultim;
        pivot = p[ultim];
        // partitionare
        do {
                while (p[i] > pivot) //modificare pt a afisa elementele in ordine descrescatoare
                        i++;
                while (p[j] < pivot)  //modificare pt a afisa elementele in ordine descrescatoare
                        j--;
                if (i < j) {
                        temp = p[i];
                        p[i] = p[j];
                        p[j] = temp;
                }//end if
                if (i <= j) {
                        j--;
                        i++;
                }//end if
        } while (i < j);//end do-while
   // apel recursiv
        if (prim < j)
                quickSort(p, prim, j);
        if (i < ultim)
                quickSort(p, i, ultim);
}//end quickSort



PROBLEMA 3



﻿
/*
Batinas Claudia gr 2112 - Folosiţi funcţiile de bibliotecă pentru sortări (qsort( )) pentru a aranja un tablou unidimensional de înregistrări
cu nume, prenume, cod numeric personal, data angajării după două câmpuri la alegere (un exemplu ar fi:
crescător după nume şi descrescător după data angajării).
*/

#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct DataCalendar {
    int ziua;
    int luna;
    int an;
};
struct Angajat {
    char nume[15];
    char prenume[15];
    int cnp;
    struct DataCalendar data_angajare;
};
void citDatePersoane(struct Angajat*); //prototip de functie pentru citirea datelor angajatilor
void afisDatePersoane(struct Angajat*); //prototip de functie pentru afisarea datelor angajatilor
int afis__angajati(const void*, const void*);//prototip de functie pentru ordonarea crescatoare dupa data angajarii
int afis__nume(const void*, const void*);//prototip de functie pentru ordonarea descrescatoare dupa nume
int main(void)
{
    int n, i;
    struct Angajat* ang;
    printf("\n Introduceti numarul de angajati:");
    scanf("%d", &n); //am citit nr de angajati
    if (n <= 0) {
        printf("\n Nu ai introdus un numar bun!"); //validare
        return 1;
    }
    ang = (Angajat*)malloc(n * sizeof(Angajat)); //am alocat dinamic
    if (ang == NULL)
    {
        printf("\nAlocare nereusita"); //validare
        exit(1);
    }
    printf("\n Scrieti datele angajatului:");
    for (i = 0; i < n; i++)
    {
        printf("\n Angajatul %d:", i + 1);
        citDatePersoane(ang + i); //am scris datele angajatilor
    }
    for (i = 0; i < n; i++)
    {
        afisDatePersoane(ang + i); //am afisat datele angajatilor
    }
    printf("\nAngajatii sortati crescator dupa an, luna si zi: ");
    qsort(ang, n, sizeof(Angajat), afis__angajati); //am sortat angajatii crescator
    for (i = 0; i < n; i++)
        afisDatePersoane(ang + i); 
    printf("\nAngajatii sortati descrescator dupa nume:");
    qsort(ang, n, sizeof(Angajat), afis__nume); //am sortat angajatii descrescator
    for (i = 0; i < n; i++)
        afisDatePersoane(ang + i);
    if (ang)
        free(ang); //am eliberat spatiul de memorie
    return 0;
}
void citDatePersoane(struct Angajat* p)  //functie pentru citirea datelor angajatilor
{
    printf("\nNumele: ");
    scanf("%s", p->nume);
    printf("\nPrenumele: ");
    scanf("%s", p->prenume);
    printf("\nCod numeric personal: ");
    scanf("%d", &p->cnp);
    printf("\nData angajarii: ");
    printf("\n\tZiua: ");
    scanf("%d", &(p->data_angajare).ziua);
    printf("\n\tLuna: ");
    scanf("%d", &(p->data_angajare).luna);
    printf("\n\tAnul: ");
    scanf("%d", &(p->data_angajare).an);
}
void afisDatePersoane(struct Angajat* p) //functie pentru afisarea datelor angajatilor
{
    printf("\n Numele: %s", p->nume);
    printf("\n Prenumele: %s", p->prenume);
    printf("\n Cod numeric personal: %d", p->cnp);
    printf("\n Data angajarii: ");
    printf("\n\t Ziua: %d", (p->data_angajare).ziua);
    printf("\n\t Luna: %d", (p->data_angajare).luna);
    printf("\n\t Anul: %d\n", (p->data_angajare).an);
}
int afis__angajati(const void* c, const void* d) //functie pentru ordonarea crescatoare dupa data angajarii.
{
    Angajat* pa = (Angajat*)c;
    Angajat* pb = (Angajat*)d;
    if (((pa->data_angajare).an - (pb->data_angajare).an) == 0)
    {
        if (((pa->data_angajare).luna - (pb->data_angajare).luna) == 0)
        {
            return ((pa->data_angajare).ziua - (pb->data_angajare).ziua);
        }
        return ((pa->data_angajare).luna - (pb->data_angajare).luna);
    }
    return ((pa->data_angajare).an - (pb->data_angajare).an);
}

int afis__nume(const void* a, const void* b) //functie pentru ordonarea descrescatoare dupa nume
{
    int den = 0;
    Angajat* pa = (Angajat*)a;
    Angajat* pb = (Angajat*)b;
    den = strcmp(pa->nume, pb->nume);
    return  -den;
}



PROBLEMA 4




﻿//Batinas Claudia, Rad Amalia, Grupa 2112, Seria A//
/*Scrieţi o aplicaţie C/C++ in care plecând de la două tablouri (unidimensionale) de numere naturale să se obţină
un al treilea tablou care să conţină toate elementele tablourilor sursă fără a se repeta, aranjate în ordine
crescătoare.*/
#include <iostream>
#define MAX 20
using namespace std;
void citire(int x[], int n); //prototip de functie pentru citirea elementelor din tablouri
void afisare(int x[], int n); //prototip de functie pentru afisarea elementelor din tablouri
void sortare(int x[], int n); //prototip de functie pentru sortarea elementelor din tablouri
void repetare(int x[], int n); //prototip de functie pentru eliminarea dublicatelor din tablouri
void tablou3(int* x, int* y, int n, int m); //prototip de functie in care se realizeaza interclasarea elementelor din tablouri

int main()
{
        int n, m, i, j, k, x[MAX], y[MAX];
        cout << "\nLungimea primului tablou unidimensional: ";
        cin >> n; //am citit dimensiunea primului tablou
        cout << "\Introduceti elemntele tabloului: ";
        citire(x, n); //am citit elem primului tablou
        cout << "\nElementle tabloului sunt: ";
        afisare(x, n); //am afisat elem primului tablou
        cout << endl;
        cout << "\nLungimea celui de-al doilea tablou unidimendional: ";
        cin >> m; //am citit dimensiunea primului tablou
        cout << "\nIntroduceti elementele tabloului: ";
        citire(y, m); // am citit elem primului tablou
        cout << "\nElementele tabloului sunt: ";
        afisare(y, m); //am afisat elem celui de-al doilea tablou

        sortare(x, n); //am sortat elem primului tablou
        sortare(y, m); //am sortat elem celui de-al doilea tablou
        cout << endl;
        repetare(x, n); //am eliminat dublicatele din primul tablou
        repetare(y, m); //am eliminat dublicatele celui de-al doilea tablou
        cout << "\nTabloul format din cele 2 tablouri initiale: ";
        tablou3(x, y, n, m);
        return 0;
}
void citire(int x[], int n) //functie pentru citirea elementelor din tablou
{
        int i;
        for (i = 0; i < n; i++)
                cin >> x[i];
}
void afisare(int x[], int n) //functie pentru afisarea elementelor din tablou
{
        int i;
        for (i = 0; i < n; i++)
                cout << x[i] << " ";
}

void sortare(int x[], int n) //functie pentru sortarea elementelor din tablou
{
        int i, j, minim, ok;
        for (i = 0; i < n; i++)
        {
                minim = i;
                for (j = i + 1; j < n; j++) {
                        if (x[minim] > x[j])
                                minim = j;
                }
                ok = x[minim];
                x[minim] = x[i];
                x[i] = ok;
        }
        cout << "\nSirul sortat: ";
        for (i = 0; i < n; i++)
                cout << x[i] << " ";
}

void repetare(int x[], int n) //functie pentru eliminarea dublicatelor din tablou
{
        int i, j, k;
        for (i = 0; i < n; i++)
        {
                for (j = i + 1; j < n; j++)
                {
                        if (x[i] == x[j]) {
                                for (k = j; k < n - 1; k++)
                                        x[k] = x[k + 1];
                                n--;
                                j--;
                        }
                }
        }

}

void tablou3(int* x, int* y, int n, int m) //functie in care se realizeaza interclasarea elementelor din tablouri
{

        int z[MAX];
        int i = 0;
        int j = 0;
        int k = 0;
        while (i < n && j < m)
        {
                if (x[i] < y[j])
                {

                        z[k] = x[i];
                        i++;
                        k++;
                }
                else
                {

                        z[k] = y[j];
                        j++;
                        k++;
                }





        }

        if (i <= n)
        {
                for (int p = i; p < n; p++)
                {
                        z[k] = x[p];
                        k++;
                }
        }
        if (j <= m)
        {
                for (int p = j; p < m; p++)
                {
                        z[k] = y[p];
                        k++;
                }
        }


        for (i = 0; i < k - 1; i++)
                for (j = i + 1; j < k; j++)
                        if (z[i] == z[j])
                        {
                                for (int t = i; t < k - 1; t++)
                                        z[t] = z[t + 1];
                                k--;
                        }

        for (i = 0; i < k; i++)
                cout << z[i] << " ";
}


PROBLEMA 5



﻿/*
Batinas Claudia gr 2112 - Completati codul problemei date ca exemplu (2) cu alte metode de sortare (sortarea prin selectie, sortarea 
shell, etc.). Cititi de la tastatura numarul de elemente al sirurilor de valori si apoi trimiteţi-l ca parametru la 
fiecare functie. Comparati timpii de lucru ai fiecarui algoritm folosind tablouri cu dimensiune mare. Comentati 
in acest caz partea de afisare. Introduceti un timer (1-5 sec.) intre sortari in main().
*/


#include <iostream>
using namespace std;
#include <time.h>

#define MAX 20


void afis(int numere[], int); //prototip de functie care afiseaza timpul de afisare al elementelor
void bubble_sort(int numere[], int); //prototip de functie care sorteaza elementele prin metoda bulelor
void quick_sort(int numere[], int); //prototip de functie care sorteaza elementele prin metoda quick sort
int comparare(const void* arg1, const void* arg2); //prototip de functie care compara elementele 
void sortSel(int* numere, int dim);//prototip de functie care sorteaza elementele prin metoda de sortare prin selectie


int main() 
{

    int n, * nr;
    cout << "\nIntroduceti dimensiunea: ";
    cin >> n;
    if (n<0 || n>MAX)
    {
        printf("\nDimensiune gresita");
        return 1;
    }

    nr = new (std::nothrow) int[n];
    if (nr == 0)
    { 
        cout << "\nEroare la alocarea elementelor: \n";
        exit(1); 
    }
    int i;
    clock_t start, end;
    double dif;
    time_t t;
    start = clock();
    srand((unsigned)time(0));

    for (i = 0; i < n; i++) {
        nr[i] = rand();
    }
    end = clock();
    dif = (double)(end - start);
    cout << "\nGenerarea numerelor a durat (clicks) " << dif << " si (seconds) " << dif / CLOCKS_PER_SEC << endl;
    cout << "\nAfisarea numerelor a durat (clicks) " << dif << " si (seconds) " << dif / CLOCKS_PER_SEC << endl;
   
    bubble_sort(nr, n);
    afis(nr, n);


    quick_sort(nr, n);
    afis(nr, n);


    sortSel(nr, n);
    afis(nr, n);

    delete[]nr; //am eliberat spatiul de memorie
    return 0;
}

void afis(int numere[], int dim) //functie care afiseaza timpul de afisare al elementelor
{
    clock_t start, end;
    double dif;
    start = clock();
    for (int i = 0; i < dim; i++)
        cout << " " << numere[i];
    end = clock();
    dif = (double)(end - start);
    cout << "\nAfisarea numerelor a durat (clicks) " << dif << " si (seconds) " << dif / CLOCKS_PER_SEC << endl;
}
void bubble_sort(int numere[], int dim) //functie care sorteaza elementele prin metoda bulelor
{
    int i;
    clock_t start, end;
    double dif;
    int aux, ok;
    start = clock();

    do {
        ok = 1;
        for (i = 0; i < dim - 1; i++) {
            if (numere[i] > numere[i + 1]) {
                aux = numere[i];
                numere[i] = numere[i + 1];
                numere[i + 1] = aux;
                ok = 0;
            }
        }
    } while (ok == 0);

    end = clock();
    dif = (double)(end - start);
    cout << "\nOrdonarea cu \"bubble sort\" a numerelor a durat (clicks) " << dif << " si (seconds) " << dif /
        CLOCKS_PER_SEC << endl;
}
void quick_sort(int numere[], int dim) { //functie care sorteaza elementele prin metoda quick sort
    clock_t start, end;
    double dif;
    start = clock();
    qsort(numere, dim, sizeof(numere[0]), comparare);
    end = clock();
    dif = (double)(end - start);
    cout << "\nOrdonarea cu \"quick sort\" a numerelor a durat (clicks) " << dif << " si (seconds) " << dif /
        CLOCKS_PER_SEC << endl;
}
int comparare(const void* arg1, const void* arg2) //functie care compara elementele 
{
    return ((int)arg1 - (int)arg2);
}
void sortSel(int* numere, int dim) //functie care sorteaza elementele prin metoda de sortare prin selectie
{
    int i, j, pozmin, temp;
    clock_t start, end;
    double dif;
    start = clock();
    for (i = 0; i < dim; i++) {
        // cautare pozitie cel mai mic element din sirul curent
        pozmin = i;
        for (j = i + 1; j < dim; j++) {
            if (numere[pozmin] > numere[j])
                pozmin = j;
        }//end for
        // interschimbare cu elementul de pe prima pozitie
        temp = numere[pozmin];
        numere[pozmin] = numere[i];
        numere[i] = temp;
    }//end for
    end = clock();
    dif = (double)(end - start);
    cout << "\nOrdonarea prin \"selectie\" a numerelor a durat (clicks) " << dif << " si (seconds) " << dif /
        CLOCKS_PER_SEC << endl;
}//end sortSel



PROBLEMA 6




/*
Batinas Claudia gr 2112 - Cititi de la tastatura m elemente de tip intreg intr-un tablou unidimensional si o valoare intreaga n<m. Impartiti
tabloul citit in doua sub-tablori astfel:
a) primul subtablou va contine primele n elemente din tabloul initial
b) al doilea subtablou va contine restul elementelor din tablul initial.
Sa se realizeze urmatoarele operatii:
 1. sa se ordoneze crescator cele doua subtablouri
 2. sa se sorteze tabloul initial, prin interclasarea celor doua subtablori ordonate. (merge-sort)

*/

#include <iostream>

using namespace std;

void sortare_tab1(int* t1, int n); //prototip de functie pentru sortarea elementelor din primul tablou
void sortare_tab2(int* t2, int k); //prototip de functie pentru sortarea elementelor din al doilea tablou
void interclasare(int* t1, int* t2, int n, int k); //prototip de functie pentru interclasarea elementelor din cele doua subtablouri

#define MAX 30

int main()
{
        int n, m,tab[MAX],i,t1[MAX],t2[MAX],k=0,j;
        cout << "\nIntroduceti numarul de elemente: ";
        cin >> m; //am citit nr de elemente al sirului
        cout << "\nIntroduceti elementele sirului: ";
        for(i=0;i<m;i++)
        cin >> tab[i]; //am citit elementele sirului
        cout << "\nIntroduceti n: ";
        cin >> n; //am citit n
        for (i = 0; i < n; i++)
                t1[i] = tab[i]; //primul subtablou
        for (i = n ; i < m; i++)
        {
                t2[k] = tab[i]; //al doilea subtablou
                k++;
        }
        cout << "\nPrimul subtablou: " << endl;
        for (i = 0; i < n; i++)
                cout << t1[i] << " "; //am afisat primul subtablou
        cout << endl;
        cout << "\nAl doilea subtablou: " << endl;
        for (i = 0; i < k; i++)
                cout << t2[i] << " "; //am afisat al doilea subtablou
        cout << endl;
        cout << "\nPrimul tablou sortat: ";
        sortare_tab1(t1, n); //am afisat primul subtablou sortat

        cout << "\nAl doilea tablou sortat: ";
        sortare_tab2(t2, k); //am afisat al doilea subtablou sortat

        interclasare(t1, t2, n, k); //am afisat tabloul format prin interclasare
        
                
        return 0;
}

void sortare_tab1(int* t1, int n) //functie pentru sortarea elementelor din primul tablou
{
        int i,j;
        for (i = 0; i < n - 1; i++)
                for (j = i + 1; j < n; j++)
                        if (t1[j] < t1[i])
                        {
                                int aux = t1[j]; //am sortat primul subtablou
                                t1[j] = t1[i];
                                t1[i] = aux;
                        }
        for (i = 0; i < n; i++)
                cout << t1[i] << " "; //am afisat primul subtablou
        cout << endl;


}

void sortare_tab2(int* t2, int k) //functie pentru sortarea elementelor din al doilea tablou
{
        int i, j;
        for (i = 0; i < k - 1; i++)
                for (j = i + 1; j < k; j++)
                        if (t2[j] < t2[i])
                        {
                                int aux = t2[j];
                                t2[j] = t2[i]; //am sortat al doilea subtablou
                                t2[i] = aux;
                        }

        for (i = 0; i < k; i++)
                cout << t2[i] << " "; //am afisat al doilea subtablou

}

void interclasare(int* t1, int* t2, int n, int k) //functie pentru interclasarea elementelor din cele doua subtablouri
{
        int tab[MAX];
        int i, j, t;
        i = 0;
        j = 0;
        t = 0;
        while (i < n && j < k)
        {
                if (t1[i] < t2[j])
                {
                        
                        tab[t] = t1[i];
                        i++;
                        t++;

                }
                else
                {
                        
                        tab[t] = t2[j];
                        j++;
                        t++;

                }
        }
        if (i <= n)
        {
                for (int p = i; p < n; p++)
                {
                        tab[t] = t1[p];
                        t++;
                }
        }
        if (j <= k)
        {
                for (int p = j; p < k; p++)
                {
                        tab[t] = t2[p];
                        t++;
                }
        }

        cout << "\nTabloul format prin interclasare: "<<endl;
        for (i = 0; i < t; i++)
                cout << tab[i] << " ";
}




PROBLEMA 7




﻿/*
Batinas Claudia gr 2112 - Să se scrie un program care permite sortarea unui stoc de calculatoare. Acestea să se reprezinte în program ca 
o structură formată din caracteristicile calculatoarelor (nume (sir caractere), tip de procesor (sir caractere), 
frecventa de tact (long int), dimensiunea memoriei RAM (int), preț (float). Sortarea se va face, la alegerea 
utilizatorului, după: pret, memorie, tact sau tip de procesor. Folosiți, de preferință, funcția de bibliotecă pentru 
sortări qsort( ) sau o altă metodă la alegere. Sortați apoi considerând un câmp sir de caractere si unul numeric. 
Afișați rezultatele.
*/

#define _CRT_SECURE_NO_WARNINGS

#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>
#include<string.h>

struct StocCalc
{
    char nume[20];
    char procesor[20];
    long int fr_tact;
    int memorie;
    float pret;
};

void cit__Produs(struct StocCalc*);//prototip de functie pentru citirea produselor
void afis__Produs(struct StocCalc*); //prototip de functie pentru afisarea produselor
int afis_pret(const void*, const void*);// functie pentru sortare descrescatoare dupa pret.
int afis_ord(const void*, const void*);// functie pentru sortare crescatoare dupa nume si dimensiunea RAM.

int main(void)
{
    struct StocCalc* pr;
    int n, i;
    printf("\nIntroduceti numarul de produse:");
    scanf("%d", &n); //am citit nr de produse
    if (n <= 0)
    {
        printf("\nNumar incorect!"); //validare
        return 1;
    }
    pr = (StocCalc*)malloc(n * sizeof(StocCalc)); //am alocat dinamic
    if (pr == NULL)
    {
        printf("\nAlocare nereusita"); //validare
        return 1;
    }
    for (i = 0; i < n; i++)
    {
        printf("\nProdusul %d", i + 1); 
        cit__Produs(pr + i); //am citit datele despre produse
    }
    for (i = 0; i < n; i++)
    {
        printf("\nProdusul %d:", i + 1);
        afis__Produs(pr + i); //am afisat datele despre produse
    }
    printf("\n\nProduse sortate descrescator dupa pret:");
    qsort(pr, n, sizeof(StocCalc), afis_pret); //am sortat descresctor dupa pret
    for (i = 0; i < n; i++)
        afis__Produs(pr + i); //am afisat produsele
    printf("\n\nProduse sortate crescator dupa nume si dimensiunea memoriei RAM:");
    qsort(pr, n, sizeof(StocCalc), afis_ord); //am sortat crescator dupa nume si dim memoriei
    for (i = 0; i < n; i++)
        afis__Produs(pr+ i); //am afisat produsele
    if (pr)
        free(pr); //am eliberat spatiul de memorie
    return 0;
}
void cit__Produs(struct StocCalc* p) //functie pentru citirea produselor
{
    printf("\nIntroduceti numele:");
    scanf("%s", p->nume);
    printf("\nIntroduceti tipul procesorului:");
    scanf("%s", p->procesor);
    printf("\nIntroduceti frecventa de tact:");
    scanf("%ld", &p->fr_tact);
    printf("\nIntroduceti dimensiunea memoriei RAM:");
    scanf("%d", &p->memorie);
    printf("\nIntroduceti pretul:");
    scanf("%f", &p->pret);
}
void afis__Produs(struct StocCalc* p) //functie pentru afisarea produselor
{
    printf("\nDenumirea: %s", p->nume);
    printf("\nTipul procesorului: %s", p->procesor);
    printf("\nFrecventa de tact: %ld", p->fr_tact);
    printf("\nDimensiunea memoriei RAM: %d", p->memorie);
    printf("\nPret: %f", p->pret);
}
int afis_pret(const void* a, const void* b)//functie pentru sortare dupa pret
{
    StocCalc* pa = (StocCalc*)a;
    StocCalc* pb = (StocCalc*)b;
    return (pb->pret - pa->pret);//descrescator
}
int afis_ord(const void* c, const void* d)//sortare crescatoare dupa nume si dimensiunea RAM
{
    int den = 0;
    StocCalc* pc = (StocCalc*)c;
    StocCalc* pd = (StocCalc*)d;
    if ((den = strcmp(pc->nume, pd->nume)) == 0)
        return (pc->memorie - pd->memorie);
    else
        return den;
}



PROBLEMA 8



﻿/*
Batinas Claudia gr 2112 - Preluați din două fișiere doua tablouri unidimensionale ce conțin valori reale.Generați un al treilea tablou care
să conțină toate valorile din cele doua tablouri și toate valorile obținute prin medierea valorilor de pe aceeași
poziție din cele doua tablouri inițiale.Dacă numărul de elemente ale tablourilor diferă, media se va face
considerând valoarea 0.0 pentru elementele lipsă.Ordonați al treilea tablou și numărați câte valori neunice sunt
în șir.
*/

#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <climits>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

#define MAX 20

void creare_tab(float*, float*, int, int); //prototip de functie pentru crearea noului tablou

int main()
{
    FILE* filep;
    int i=0, j=0,n,m;
    float tab1[MAX], tab2[MAX];
    filep = fopen("fisier8.txt", "a+");
    if (!filep)
    {
        printf("\n EROARE la deschiderea fisierului..."); //validare
        exit(1);
    }
    
    fscanf(filep, "%d", &n); //am citit dim primului tablou
    
   
    cout << "\nPrimul tablou este: ";
    for (i = 0; i < n; i++)
    {
        fscanf(filep, " %f ", &tab1[i]); //am citit in fisier elementele primului tablou

    }
    for (i = 0; i < n; i++)
        cout << tab1[i] << " "; //am afisat pe ecran elementele primului tablou
    
   
    fscanf(filep, "%d", &m); //am citit dim celui de-al doilea tablou
   
   
    cout << "\nAl doilea tablou este : " << endl;
    while (!feof(filep))
    {
        fscanf(filep, "%f", &tab2[j]);  //am citit in fisier elementele primului tablou
        j++;
        
    }
    for (j= 0; j < m; j++)
        cout << tab2[j] << " "; // am afisat pe ecran elementele celui de-al doilea tablou

    creare_tab(tab1, tab2, n, m);
    fclose(filep);
    return 0;
}

void creare_tab(float* tab1, float* tab2, int n, int m)
{
    float tab[MAX];
    int i, j,k=0,cnt=0;
    for (i = 0; i < n; i++)
    {
        tab[k] = tab1[i]; //am adaugat el primului tab
        k++;
    }
    for (j = 0; j < m; j++)
    {
        tab[k] = tab2[j]; //am adaugat el celui de-al doilea tab
        k++;
    }
    cout << "\nTabloul format din cele doua tablouri: ";
    for (i = 0; i < k; i++)
        cout << tab[i] << " "; //am afisat tabloul
    cout << endl;
    if (n == m)
    {
        for (i = 0; i < n; i++)
        {
            tab[k] = (float)(tab1[i] + tab2[i])/2; //daca au aceeasi dimensiune am calculat valoarea medie a elementelor de pe aceeasi poz
            k++;
        }

    }
    else if (n > m)
        {
            for (i = 0; i < m; i++)
            {
                tab[k] = (float)(tab1[i] + tab2[i])/2; //daca primul are dim m mare, am calculat val medie a elem, iar la elem lipsa am considerat 0
                k++;
            }

            for (i = m; i < n; i++)
            {
                tab[k] = (float)(tab1[i] / 2);
                k++;
            }

        }
    else
    {
        for (i = 0; i < n; i++)
        {
            tab[k] = (float)(tab1[i] + tab2[i]) / 2; //daca primul are dim m mica, am calculat val medie a elem, iar la elem lipsa am considerat 0
            k++;
        }

        for (i = n; i < m; i++)
        {
            tab[k] = (float)(tab2[i] / 2);
            k++;
        }

    }
    cout << "\nTabloul transformat: " << endl;
    for (i = 0; i < k; i++)
        cout << tab[i] << " "; //am afisat tabloul cu elementele adaugate

    for(i=0;i<k-1;i++)
        for(j=i+1;j<k;j++)
            if (tab[j] < tab[i])
            {
                int aux = tab[i];
                tab[i] = tab[j]; //am ordonat tabloul
                tab[j] = aux;
            }
    for (i = 0; i < k - 1; i++)
        for (j = i + 1; j < k; j++)
            if (tab[j] == tab[i]) cnt++; //am numarat cate elem sunt neunice
    cout << "\nContorul valorilor neunice din tablou este: " << cnt; //am numarat elem neunice

}


PROBLEMA 9




/*
Batinas Claudia gr 2112 - Generati in mod aleatoriu un tablou de maxim 200 valori intregi, valori nu mai mari de 100. Determinati si 
afisati valoarea minima, mediana si maxima generata, sortand elementele printr-o metoda la alegere. 
Determinati valoarea medie si comparati aceasta valoare cu cea mediana (afisati diferenta). Verificati daca 
valoarea medie este in tabloul initial generat.

*/

#include <iostream>
#include <time.h>

using namespace std;

#define MAX 200

void bubbleSort(int tab[], int n); //prototip de functie pentru sortare folosind bubble sort

int main()
{
    bool gasit = false;
        int tab[MAX],n,val_mediana=0,s=0,dif=0;
    double val_medie = 0;
        cout << "\nIntroduceti dimensiunea tabloului: ";
        cin >> n;
        if (n<0 || n>MAX)
        {
                cout<<"\nDimensiune gresita!"; //validare
                return 1;
        }
        srand(time(NULL));
        for (int i = 0; i < n; i++)
                tab[i] = rand() % 100; //am generat valori aleatorii e
    cout << "\nTabloul cu valori aleatorii este: ";
    for (int i = 0; i < n; i++)
        cout << tab[i] << " "; //am afisat elementele tabloului generat aleatoriu
    bubbleSort(tab,n);
    cout << "\nValoarea minima din tablou este: " << tab[0] << endl; //am afisat val minima
    cout << "\nValoarea maxima din tablou este: " << tab[n - 1] << endl; //am afisat val maxima
     val_mediana = tab[n / 2 ];
    cout << "\nValoarea mediana din tablou este: " << val_mediana << endl; //am afisat val mediana
    for (int i = 0; i < n; i++)
        s = s + tab[i];
    val_medie = (double)s / n; //am calculat valoarea medie
    cout << "\nValoarea medie din tablou este: " << val_medie << endl; //am afisat val medie
    if (val_medie > val_mediana) dif = val_medie - val_mediana;
    else dif = val_mediana - val_medie; //am calculat diferenta dintre val medie si val mediana
    cout << "\nDiferenta dintre valoarea medie si valoarea mediana este: " << dif << endl; //am afisat diferenta
    for (int i = 0; i < n; i++)
        if (tab[i] == val_medie)
        {
            gasit = true; //am verificat daca valoarea medie se gaseste in tablou
            break;
        }
    if (gasit == true) cout << "\nValoarea medie s-a gasit in tabloul initial";
    else cout << "\nValoarea medie nu s-a gasit in tabloul initial";

    return 0;
}


void bubbleSort(int tab[], int n) //functie pt ordonare folosind Bubble Sort
{
    int i, j, aux, flag = 0;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n - i - 1; j++)
        {

            if (tab[j] > tab[j + 1]) //algoritm bubble sort
            {

                aux = tab[j];
                tab[j] = tab[j + 1];
                tab[j + 1] = aux;

                flag = 1; //daca am interschimbat macar o data elementele din sir flag-ul a primit valoarea 1
            }
        }

        if (flag == 0) //daca valoarea flag-ului a ramas 0 iesit din structura repetitiva
        {
            break;
        }
    }

    cout<<"\nSirul sortat este: ";
    for (i = 0; i < n; i++)
    {
        cout<< tab[i]<<" "; //am afisat sirul sortat
    }
}